import bpy

#https://blender.stackexchange.com/questions/61618/add-a-custom-curve-mapping-property-for-an-add-on/61829#61829

def myNodeTree():
    if 'TestCurveData' not in bpy.data.node_groups:
        ng = bpy.data.node_groups.new('TestCurveData', 'ShaderNodeTree')
    #bpy.data.node_groups['TestCurveData'].nodes[0].mapping.curves[3].points[0].location = 1.0
    #bpy.data.node_groups['TestCurveData'].nodes[0].mapping.curves[3].points[1].location = 0.0
    
    return bpy.data.node_groups['TestCurveData'].nodes

curve_node_mapping = {}

def myCurveData(curve_name):
    if curve_name not in curve_node_mapping:
        cn = myNodeTree().new('ShaderNodeRGBCurve')
        curve_node_mapping[curve_name] = cn.name
        
    #return myNodeTree()[curve_node_mapping[curve_name]]
    nodeTree = myNodeTree()[curve_node_mapping[curve_name]]
    
    
    return nodeTree

class initButton(bpy.types.Operator):
    bl_idname="scene.init_button"
    bl_label="initialise"
        
    def execute(self, context):
        nodeGroups = bpy.data.node_groups.get('TestCurveData')
        nrCurves = len(nodeGroups.nodes[curve_node_mapping['TestOne']].mapping.curves)
        self.report({'INFO'}, f"nrCurves: {nrCurves}")
        curveElement = nodeGroups.nodes[curve_node_mapping['TestOne']].mapping.curves[3] 
        
        #initialise values (funkt!)
        curveElement.points[0].location = (0.0, 1.0)
        curveElement.points[1].location = (1.0, 0.0)
        if len(curveElement.points) > 2:
            for i in range(2, len(curveElement.points)):
                curveElement.points.remove(curveElement.points[len(curveElement.points) - 1])
                self.report({'INFO'}, "removing point")
        nodeGroups.nodes[curve_node_mapping['TestOne']].mapping.update()
        return {'FINISHED'}

class evaluateButton(bpy.types.Operator):
    bl_idname="scene.evaluate_button"
    bl_label="evaluate"
        
    def execute(self, context):
        nodeGroups = bpy.data.node_groups.get('TestCurveData')
        nrCurves = len(nodeGroups.nodes[curve_node_mapping['TestOne']].mapping.curves)
        self.report({'INFO'}, f"nrCurves: {nrCurves}")
        curveElement = nodeGroups.nodes[curve_node_mapping['TestOne']].mapping.curves[3] 
        # scalar curve uses a in rgb[a] in curve!
        
        
        for point in curveElement.points:
            self.report({'INFO'}, f"location: {point.location}")
            self.report({'INFO'}, f"handle type: {point.handle_type}")  
                
        return {'FINISHED'}
    
class CurvyPanel(bpy.types.Panel):
    bl_label = "Test curve mapping"
    bl_idname = "PT_curveMapping"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'curveMapping'

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        layout.template_curve_mapping(myCurveData('TestOne'), "mapping")
        
class EvalPanel(bpy.types.Panel):
    bl_label = "Evaluate"
    bl_idname = "PT_evaluate"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'curveMapping'
    
    def draw(self, context):
        layout = self.layout
        layout.operator("scene.evaluate_button", text="Evaluate")
        layout.operator("scene.init_button", text="Initialise")

def register():
    #bpy.utils.register_class(floatProp)
    bpy.utils.register_class(CurvyPanel)
    bpy.utils.register_class(EvalPanel)
    bpy.utils.register_class(evaluateButton)
    bpy.utils.register_class(initButton)
    
    bpy.types.Scene.evaluate = bpy.props.FloatProperty(
        name = "evaluate at",
        default = 0.0,
        min = 0.0, 
        max = 1.0
    )
    
    bpy.types.Scene.my_curve_mapping : bpy.props.CurveMappingProperty(
        name="My Curve Mapping", 
        min=0.0, 
        max=1.0,
        subtype='VALUE' # or 'XYZ', 'HSV', 'CRGB'
    )

def unregister():
    bpy.utils.unregister_class(CurvyPanel)
    bpy.utils.unregister_class(EvalPanel)
    bpy.utils.unregister_class(evaluateButton)
    bpy.utils.unregister_class(initButton)
    del bpy.types.Scene.evaluate
    del bpy.types.Scene.my_curve_mapping
    
if __name__ == "__main__":
    register();
